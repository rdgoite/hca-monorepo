buildscript {

    repositories {
        jcenter()
    }

}

subprojects {

    afterEvaluate {

        File dockerFile = file("$projectDir/Dockerfile")

        if (dockerFile.exists()) {
            task buildDockerImage(type: Exec) {
                if (project.pluginManager.hasPlugin('java')) {
                    dependsOn = [build]
                } else {
                    dependsOn = [test]
                }
                commandLine 'docker', 'build', '-t', "$project.name", '.'
            }
        }

    }

}

def python3Projects = ['ingest-accessioner', 'ingest-exporter', 'ingest-fastq-validator',
        'ingest-staging-manager', 'ingest-validator']
configure(subprojects.findAll { it.name in python3Projects }) {

    task test(type: Exec) {
        def testDirectory = file('test')
        def testsDirectory = file('tests')

        if (testDirectory.exists() || testsDirectory.exists()) {
            commandLine 'python3', '-m', 'pip', 'install', '--user', '-r', 'requirements.txt'
            commandLine 'python3', '-m', 'pip', 'install', '--user', 'nose'
            commandLine 'python3', '-m', 'nose'
        } else {
            commandLine 'echo', '[test] or [tests] directory not found. Testing skipped.'
        }

    }

}

project(':ingest-broker') {

    task test(type: Exec) {
        //commandLine 'python2.7', '-m', 'pip', 'install', '--user', '-r', 'requirements.txt'
        commandLine 'python2.7', '-m', 'pip', 'install', '--user', 'nose'
        //commandLine 'python2.7', '-m', 'nose'
    }

}

project(':ingest-kube-deployment') {

    task applyConfig(type: Exec) {
        def yamlFileNames = [
                'service-rabbit-deploy.yml',
                'service-mongo-deploy.yml',
                'service-ingest-core-deploy.yml',
                'service-ingest-demo-deploy.yml',
                'rabbit-deploy.yml',
                'mongo-deploy.yml',
                'ingest-core-deploy.yml',
                'ingest-demo-deploy.yml',
                'ingest-accessioner-deploy.yml',
                'ingest-validator-deploy.yml',
                'ingest-exporter-deploy.yml',
                'ingest-staging-manager-deploy.yml'
        ]

        yamlFileNames.each { yaml ->
            commandLine 'kubectl', 'apply', '-f', "$projectDir/local-dev/ingestion/$yaml"
        }
    }

}
